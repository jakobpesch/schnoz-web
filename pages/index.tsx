import type { NextPage } from "next"
import { Box, ChakraProvider, Flex, Text } from "@chakra-ui/react"
import { extendTheme } from "@chakra-ui/react"
import { useState } from "react"

const colors = {
  brand: {
    900: "#1a365d",
    800: "#153e75",
    700: "#2a69ac",
  },
}

const theme = extendTheme({ colors })

type PlayerId = 0 | 1
interface Unit {
  playerId: PlayerId
}
interface Tile {
  id: string
  row: number
  col: number
  unit?: Unit
}
interface Map {
  [id: string]: Tile
}

const placeUnit = (map: Map, tile: Tile, playerId: PlayerId) => {
  return { ...map, [tile.id]: { ...map[tile.id], unit: { playerId } } }
}
const removeUnit = (map: Map, tile: Tile) => {
  return { ...map, [tile.id]: { ...tile, unit: undefined } }
}

const initialiseMap = (rowCount: number, columnCount: number) => {
  const rowIndices = [...Array(rowCount).keys()]
  const columnIndices = [...Array(columnCount).keys()]
  const map: Map = {}
  rowIndices.forEach((iRow) => {
    columnIndices.forEach((iCol) => {
      const id = `${iRow}_${iCol}`
      map[id] = { id: id, row: iRow, col: iCol }
    })
  })
  return map
}

const getBackgroundColor = (tile: Tile) => {
  if (tile.unit?.playerId === 0) {
    return "salmon"
  }
  if (tile.unit?.playerId === 1) {
    return "skyblue"
  }
  return (tile.row + tile.col) % 2 === 0 ? "#f4f4f4" : "white"
}

const RenderSettings = {
  tileSize: 50,
}
interface TileProps {
  tile: Tile
  onClick: (tile: Tile["id"]) => void
}
function Tile(props: TileProps) {
  const { tile, onClick } = props

  return (
    <Box
      display="flex"
      justifyContent="center"
      alignItems="center"
      width={RenderSettings.tileSize + "px"}
      height={RenderSettings.tileSize + "px"}
      background={getBackgroundColor(tile)}
      fontSize="10px"
      onClick={() => onClick(tile.id)}
    >
      <Text pointerEvents="none" textAlign="center">
        {tile.row + "," + tile.col}
      </Text>
    </Box>
  )
}
interface MapProps {
  rowCount: number
  columnCount: number
  onUpdateStatus: (status: string) => void
}
function Map(props: MapProps) {
  const { rowCount, columnCount, onUpdateStatus } = props

  const [map, setMap] = useState(initialiseMap(rowCount, columnCount))

  const mapWidth = RenderSettings.tileSize * rowCount
  const mapHeight = RenderSettings.tileSize * columnCount

  const onTileClick = (id: Tile["id"]) => {
    onUpdateStatus("Clicked tile with id: " + id)
    const tile = map[id]
    if (tile.unit) {
      setMap(removeUnit(map, map[id]))
    } else {
      setMap(placeUnit(map, map[id], 0))
    }
  }

  return (
    <Box
      display="flex"
      flexWrap="wrap"
      boxShadow=" 0 0 1px 1px #000000"
      width={mapWidth + "px"}
      height={mapHeight + "px"}
    >
      {Object.values(map).map((tile) => {
        return <Tile key={tile.id} tile={tile} onClick={onTileClick} />
      })}
    </Box>
  )
}

const Game: NextPage = () => {
  const [status, setStatus] = useState("")
  return (
    <ChakraProvider theme={theme}>
      <Flex width="full" height="100vh" justify="center" align="center">
        <Box position="absolute" top="4" right="4">
          {status}
        </Box>
        <Map rowCount={10} columnCount={10} onUpdateStatus={setStatus} />
      </Flex>
    </ChakraProvider>
  )
}

export default Game

// const Home: NextPage = () => {
//   return (
//     <Box className={styles.container}>
//       <Head>
//         <title>Create Next App</title>
//         <meta name="description" content="Generated by create next app" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>

//       <main className={styles.main}>
//         <h1 className={styles.title}>
//           Welcome to <a href="https://nextjs.org">Next.js!</a>
//         </h1>

//         <p className={styles.description}>
//           Get started by editing{" "}
//           <code className={styles.code}>pages/index.tsx</code>
//         </p>

//         <Box className={styles.grid}>
//           <a href="https://nextjs.org/docs" className={styles.card}>
//             <h2>Documentation &rarr;</h2>
//             <p>Find in-depth information about Next.js features and API.</p>
//           </a>

//           <a href="https://nextjs.org/learn" className={styles.card}>
//             <h2>Learn &rarr;</h2>
//             <p>Learn about Next.js in an interactive course with quizzes!</p>
//           </a>

//           <a
//             href="https://github.com/vercel/next.js/tree/canary/examples"
//             className={styles.card}
//           >
//             <h2>Examples &rarr;</h2>
//             <p>Discover and deploy boilerplate example Next.js projects.</p>
//           </a>

//           <a
//             href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
//             className={styles.card}
//           >
//             <h2>Deploy &rarr;</h2>
//             <p>
//               Instantly deploy your Next.js site to a public URL with Vercel.
//             </p>
//           </a>
//         </Box>
//       </main>

//       <footer className={styles.footer}>
//         <a
//           href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
//           target="_blank"
//           rel="noopener noreferrer"
//         >
//           Powered by{" "}
//           <span className={styles.logo}>
//             <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
//           </span>
//         </a>
//       </footer>
//     </Box>
//   );
// };
